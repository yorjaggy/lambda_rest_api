service: imageUploader

frameworkVersion: '2'

custom:
  bucket: getting-started-lambda-example-jaggy
  config: ${file(configurations/${env:STAGE}.json)}
  stages:
    - ${env.STAGE}

package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - ./**
    - "node_modules/"
    - package.json
  include:
    - uploadImage.js
    - configurations/**

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.config.stage}
  lambdaHashingVersion: '20201221'
  region: ${self:custom.config.region}
  tracing:
    lambda: true
    apiGateway: true
  layers:
    - arn:aws:lambda:us-east-1:869315223613:layer:myFirstCapa:5
  iam:
    role:
      statements:
      - Effect: "Allow"
        Action:
          - "s3:PutObject" 
        Resource: 
          - "arn:aws:s3:::${self:custom.bucket}/*"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

functions:
  api:
    handler: uploadImage.handler
    events:
      - http:
          path: upload
          method: post
          cors: true
      - http:
          path: health
          method: any
          cors: true
    environment:
      Bucket: ${self:custom.bucket}

resources:
  Resources:
    StorageBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.bucket}

plugins:
  - serverless-offline
  # - serverless-api-stage
  # - serverless-domain-manager
  # - serverless-apigw-binary
  # - serverless-plugin-warmup
  # - serverless-plugin-log-subscription
